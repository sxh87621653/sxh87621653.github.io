api》 user.js

export function userDetail(id) {
    return request({
        url:'/user/detail',
        method:'get',
        params: {id:id}
    });
}


export function userEditPWD(data) {
    return request({
        url:'/user/EditPWD',
        method:'post',
        data:data
    });
}

api》 company.js

export function companyEditPWD(data) {
    return request({
        url:'/company/EditPWD',
        method:'post',
        data:data
    });
}


export function companyDetail(id) {
    return request({
        url:'/company/detail',
        method:'get',
        params: {id:id}
    });
}

api》 student.js

export function studentDetail(id) {
    return request({
        url:'/student/detail',
        method:'get',
        params: {id:id}
    });
}

export function studentEditPWD(data) {
    return request({
        url:'/student/EditPWD',
        method:'post',
        data:data
    });
}


components>  Navbar.vue

<template>
    <div>
        <el-header>
        <span class="collapse" @click="handleCollapse">
            <i class="el-icon-s-fold"></i>
        </span>
            <div class="user-info">
                <i class="el-icon-chat-line-square"></i>
                <i class="el-icon-full-screen" @click="handleFullScreen"></i>
                <!--<span class="avatar"><el-avatar icon="el-icon-user-solid" :size="28"></el-avatar></span>-->
                <el-dropdown  @command="handleCommand">
                <span class="el-dropdown-link">
                   {{name}}
                <i class="el-icon-caret-bottom"></i>
                </span><!---->
                    <el-dropdown-menu slot="dropdown">
                        <el-dropdown-item command="home">
                            <i class="el-icon-s-home"></i>
                            网站首页
                        </el-dropdown-item>
                        <el-dropdown-item command="password">
                            <i class="el-icon-edit-outline"></i>
                            修改密码
                        </el-dropdown-item>
                        <el-dropdown-item command="logout">
                            <i class="el-icon-s-unfold"></i>
                            退出登录
                        </el-dropdown-item>
                    </el-dropdown-menu>
                </el-dropdown>
            </div>
        </el-header>
        <EditPWD v-if="edit.visible" :param="edit"></EditPWD>
    </div>

</template>

<script>
    import screenfull from "screenfull";
    import {message} from '@/utils/message';
    import local from "@/store/local";
    import EditPWD from "./EditPWD";
    export default {
        name: "Navbar",
        components: {EditPWD},
        data(){
          return {
              edit:{
                  visible:false,
                  close:this.close,
                  form:null,
              },
          }
        },
        computed:{
          name(){
              return local.getUserInfo().name;
          }
        },
        methods:{
            handleCollapse()//边菜
            {
                this.$emit('handleCollapse')
            },
            handleFullScreen()//全屏
            {
                if(!screenfull.enabled){
                    message.warning("浏览器不能全屏，安装其他版本试试");
                    return false
                }
                // 调用 screenfull.toggle() 可以双向切换全屏与非全屏
                screenfull.toggle()
            },
            handleCommand(type)//下拉退出
            {
                if(type === 'logout'){
                    this.$confirm('确定要退出码？','退出提示',).then(()=>{
                        this.$router.push('/login');//确定
                        local.clear();
                    }).catch(()=>{});//取消
                }
                if(type === 'home'){
                   this.$router.push('/');//确定
                }
                if(type==='password'){
                    this.edit.visible = true;
                }
            },
            close(){
                this.edit.visible=false;
            },
        }
    }
</script>

<style scoped>
.el-header{
    height: 60px;
    background-color: #1AA094;
    width: 100%;
    line-height: 60px;
    padding: 0px;
    display: flex;
}
.collapse{
    cursor: pointer;
    padding: 0 20px;
    color: white;
}
.user-info{
    height: 60px;
    width: 100%;
    width: 400px;
    margin-left: auto;
    padding-right: 20px;
    text-align: right;
}
.user-info>i{
    cursor: pointer;
    padding: 10px 15px;
    color: white;
}
.el-dropdown{
    margin-left: 10px;
}
 .el-dropdown-link{
     color: white;
     cursor: pointer;
    }

</style>


<!--导航栏-->



components> EditPWD.vue

<template>
    <el-dialog title="修改" :visible.sync="param.visible" @close="param.close" :close-on-click-modal="false">
        <r-form ref="myForm" :rules="rules" :form="form" :items="items" :save="save"></r-form>
    </el-dialog>
</template>

<script>
    import {userEditPWD,userDetail} from "@/api/user";
    import {companyEditPWD,companyDetail} from "@/api/company";
    import {studentEditPWD,studentDetail} from "@/api/student";
    import RForm from "@/components/RForm";
    import {message} from "@/utils/message";
    import local from "@/store/local";

    export default {
        name: "Edit",
        components: {RForm},
        props:{
            param:{
                type:Object,
                default:()=>{}
            }
        },
        data(){
            return{
                form:{
                    id:null,
                    PWD1:'',
                    PWD2:'',
                    password:'',
                },
                userform:{
                    id:null,
                    password:'',
                },
                companyform:{
                    id:null,
                    password:'',
                },
                studentform:{
                    id:null,
                    password:'',
                },
                rules:{
                    PWD1:[{required:true,message:'必填项不能为空'}],
                    PWD2:[{required:true,message:'必填项不能为空'}],
                    password:[{required:true,message:'必填项不能为空'}],
                },
                items:[
                    {type:'text',label:'原密码',prop:'PWD1',name:'PWD1',placeholder:'原密码'},
                    {type:'text',label:'现密码',prop:'PWD2',name:'PWD2',placeholder:'现密码'},
                    {type:'text',label:'重复密码',prop:'password',name:'password',placeholder:'重复密码'},
                ]
            }
        },

        // mounted() {
        //     this.form = JSON.parse(JSON.stringify(this.param.form));
        //     query({}).then(res=>{
        //         let arr = [];
        //         res.data.forEach(item=>{
        //             let param = {value:item.id,label:item.name}
        //             arr.push(param)
        //         })
        //         this.items[0].options = arr;
        //     });
        // },

        methods:{
            save(){
                if(this.form.PWD2==this.form.password)
                {
                    console.log(local.getUserInfo().type);
                    switch (local.getUserInfo().type) {
                        case 0 :this.userEditPassword();break;
                        case 1 :this.companyEditPassword();break;
                        case 2 :this.studentEditPassword();break;
                        default:break;

                    }
                }else
                {
                    message.warning("两次输入密码不同");
                }

                },
        userEditPassword()
         {
             this.form.id=local.getUserInfo().id;
             userDetail(this.form.id).then(res=>{
                 this.userform.password=res.data.password;
                 if(this.userform.password===this.form.PWD1)
                 {
                     this.userform.id=this.form.id;
                     this.userform.password=this.form.password;
                     userEditPWD(this.userform).then(res=>{
                         message.success(res.msg);
                         this.param.close();
                     })
                 }
                 else {
                     message.warning("原密码错误")
                 }
             })
         },
        companyEditPassword()
        {
            this.form.id=local.getUserInfo().id;
            companyDetail(this.form.id).then(res=>{
                this.companyform.password=res.data.password;
                if(this.companyform.password===this.form.PWD1)
                {
                    this.companyform.id=this.form.id;
                    this.companyform.password=this.form.password;
                    companyEditPWD(this.companyform).then(res=>{
                        message.success(res.msg);
                        this.param.close();
                    })
                }
                else {
                    message.warning("原密码错误")
                }
            })
        },
        studentEditPassword()
        {
            this.form.id=local.getUserInfo().id;
            studentDetail(this.form.id).then(res=>{
                this.studentform.password=res.data.password;
                if(this.studentform.password===this.form.PWD1)
                {
                    this.studentform.id=this.form.id;
                    this.studentform.password=this.form.password;
                    studentEditPWD(this.studentform).then(res=>{
                        message.success(res.msg);
                        this.param.close();
                    })
                }
                else {
                    message.warning("原密码错误")
                }
            })
        },

        },

        }

</script>

<style scoped>

</style>






UserService.java

public int EditPWD(User user)
    {
        User param=userMapper.detail(user.getId());
        if(param!=null)
        {
            String pwd=user.getPassword();
            user=param;
            user.setPassword(pwd);
            return userMapper.update(user);
        }else {
            return 0;
        }
    }
    



UserController.java

    @PostMapping("EditPWD")
    public Result EditPWD(@RequestBody User user)
    {
        int flag=userService.EditPWD(user);
        if(flag>0)
        {
            return Result.ok();
        }else
        {
            return Result.fail();
        }
    }
    
    

CompanyService.java


 public int EditPWD(Company company)
    {
        Company param=companyMapper.detail(company.getId());
        if(param!=null)
        {
            String pwd=company.getPassword();
            company=param;
            company.setPassword(pwd);
            return companyMapper.update(company);
        }else {
            return 0;
        }
    }
    
    

CompanyController.java

@PostMapping("EditPWD")
    public Result EditPWD(@RequestBody Company company)
    {
        int flag=companyService.EditPWD(company);
        if(flag>0)
        {
            return Result.ok();
        }else
        {
            return Result.fail();
        }
    }
    
    
    
StudentService.java

 public int EditPWD(Student student)
    {
        Student param=studentMapper.detail(student.getId());
        if(param!=null)
        {
            String pwd=student.getPassword();
            student=param;
            student.setPassword(pwd);
            return studentMapper.update(student);
        }else {
            return 0;
        }
    }
    



StudentController.java

    @PostMapping("EditPWD")
    public Result EditPWD(@RequestBody Student student)
    {
        int flag=studentService.EditPWD(student);
        if(flag>0)
        {
            return Result.ok();
        }else
        {
            return Result.fail();
        }
    }




